{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bundle.js","src/ts/main.ts","../otp-field/dist/js/components/field.js","../otp-field/dist/js/components/types.js","../otp-field/dist/js/main.js","../otp-field/dist/js/utils/regex.js","../otp-field/dist/js/utils/types.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Object","defineProperty","value","otp_field_1","window","onload","otpField","OTPField","namespace","boxCount","exampleSection","document","querySelector","build","regex_1","types_1","constructor","config","this","fieldValue","skeleton","field","createElement","id","className","appendChild","getBoxElement","index","box","getBoxId","type","maxLength","autocomplete","setAttribute","toString","addEventListener","onBoxInput","bind","onBoxKeyDown","onBoxFocus","onBoxPaste","element","elem","getElementById","focus","focusBoxIndex","getBoxValue","focusBox","clear","setBoxValue","destroy","remove","parentElement","getOtpRegex","_a","customRegex","getOTPRegexForValueType","valueType","OTPValueType","NUMERIC","applyRegex","replace","getBoxAtIndex","boxId","getBoxIndex","dataIndex","getAttribute","parseInt","updateValue","concatenatedValue","focusNextBox","currentBox","currentBoxIndex","focusPrevBox","preventDefault","pastedText","clipboardData","getData","pastedValue","target","Math","min","onPasteBlur","undefined","blur","selectionStart","selectionEnd","key","updatedValue","__createBinding","create","m","k","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","prototype","hasOwnProperty","ALPHABETIC","ALPHABETIC_LOWER","ALPHABETIC_UPPER","ALPHANUMERIC","ALPHANUMERIC_LOWER","ALPHANUMERIC_UPPER"],"mappings":"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","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"import { OTPField } from '@satyam-seth/otp-field';\n\nwindow.onload = () => {\n  // create otp field instance\n  const otpField = new OTPField({\n    namespace: 'example',\n    boxCount: 6,\n  });\n\n  // get parent element\n  const exampleSection = document.querySelector(\n    'section.example'\n  ) as HTMLElement;\n\n  // build otp field\n  otpField.build(exampleSection);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OTPField = void 0;\nconst regex_1 = require(\"../utils/regex\");\nconst types_1 = require(\"../utils/types\");\nclass OTPField {\n    constructor(config) {\n        this.fieldValue = '';\n        if (config.boxCount <= 0) {\n            throw new Error('Invalid config box count must be grater than zero.');\n        }\n        this.config = config;\n    }\n    skeleton() {\n        const field = document.createElement('div');\n        field.id = this.id;\n        field.className = 'otp-field';\n        for (let i = 0; i < this.config.boxCount; i++) {\n            field.appendChild(this.getBoxElement(i));\n        }\n        return field;\n    }\n    getBoxElement(index) {\n        const box = document.createElement('input');\n        box.id = this.getBoxId(index);\n        box.className = 'otp-box';\n        box.type = 'text';\n        box.maxLength = 1;\n        box.autocomplete = 'off';\n        box.setAttribute('data-index', index.toString());\n        box.addEventListener('input', this.onBoxInput.bind(this));\n        box.addEventListener('keydown', this.onBoxKeyDown.bind(this));\n        box.addEventListener('focus', this.onBoxFocus.bind(this));\n        box.addEventListener('paste', this.onBoxPaste.bind(this));\n        return box;\n    }\n    get value() {\n        return this.fieldValue;\n    }\n    get id() {\n        return `otp-field-${this.config.namespace}`;\n    }\n    get element() {\n        const elem = document.getElementById(this.id);\n        if (elem === null) {\n            throw new Error(`Element with ID ${this.id} not found in the DOM.`);\n        }\n        return elem;\n    }\n    focus() {\n        let focusBoxIndex = this.config.boxCount - 1;\n        for (let i = 0; i < this.config.boxCount; i++) {\n            if (this.getBoxValue(i) === '') {\n                focusBoxIndex = i;\n                break;\n            }\n        }\n        this.focusBox(focusBoxIndex);\n    }\n    clear() {\n        for (let i = 0; i < this.config.boxCount; i++) {\n            this.setBoxValue(i, '');\n        }\n        this.fieldValue = '';\n        this.focusBox(0);\n    }\n    destroy() {\n        this.element.remove();\n    }\n    build(parentElement) {\n        parentElement.appendChild(this.skeleton());\n    }\n    getOtpRegex() {\n        var _a;\n        if (this.config.customRegex) {\n            return this.config.customRegex;\n        }\n        return (0, regex_1.getOTPRegexForValueType)((_a = this.config.valueType) !== null && _a !== void 0 ? _a : types_1.OTPValueType.NUMERIC);\n    }\n    applyRegex(value) {\n        return value.replace(this.getOtpRegex(), '');\n    }\n    getBoxId(index) {\n        return `${this.config.namespace}-box-${index}`;\n    }\n    getBoxAtIndex(index) {\n        const boxId = this.getBoxId(index);\n        const box = document.getElementById(boxId);\n        if (box === null) {\n            throw new Error(`Unable to get box at index ${index}`);\n        }\n        return box;\n    }\n    getBoxIndex(box) {\n        const dataIndex = box.getAttribute('data-index');\n        if (dataIndex) {\n            return parseInt(dataIndex, 10);\n        }\n        throw new Error('Unable to get `data-index` attribute for box');\n    }\n    updateValue() {\n        let concatenatedValue = '';\n        for (let i = 0; i < this.config.boxCount; i++) {\n            concatenatedValue += this.getBoxValue(i);\n        }\n        this.fieldValue = concatenatedValue;\n    }\n    focusBox(index) {\n        const box = this.getBoxAtIndex(index);\n        box.focus();\n    }\n    focusNextBox(currentBox) {\n        const currentBoxIndex = this.getBoxIndex(currentBox);\n        if (currentBoxIndex + 1 < this.config.boxCount) {\n            this.focusBox(currentBoxIndex + 1);\n        }\n    }\n    focusPrevBox(currentBox) {\n        const currentBoxIndex = this.getBoxIndex(currentBox);\n        if (currentBoxIndex - 1 >= 0) {\n            this.focusBox(currentBoxIndex - 1);\n        }\n    }\n    setBoxValue(index, value) {\n        const box = this.getBoxAtIndex(index);\n        box.value = value;\n    }\n    getBoxValue(index) {\n        const box = this.getBoxAtIndex(index);\n        return box.value;\n    }\n    onBoxPaste(e) {\n        e.preventDefault();\n        const pastedText = e.clipboardData.getData('text');\n        const pastedValue = this.applyRegex(pastedText);\n        const currentBoxIndex = this.getBoxIndex(e.target);\n        const maxLength = Math.min(this.config.boxCount - currentBoxIndex, pastedValue.length);\n        for (let i = 0; i < maxLength; i++) {\n            this.setBoxValue(currentBoxIndex + i, pastedValue[i]);\n        }\n        if (this.config.onPasteBlur === true ||\n            this.config.onPasteBlur === undefined) {\n            e.target.blur();\n        }\n        else {\n            this.focusBox(currentBoxIndex + maxLength - 1);\n        }\n        this.updateValue();\n    }\n    onBoxFocus(e) {\n        if (e.target.value.length === 1) {\n            e.target.selectionStart = 0;\n            e.target.selectionEnd = 1;\n        }\n    }\n    onBoxKeyDown(e) {\n        if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n            e.preventDefault();\n            this.focusPrevBox(e.target);\n        }\n        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n            e.preventDefault();\n            this.focusNextBox(e.target);\n        }\n        if (e.key === 'Backspace' &&\n            (e.target.value === '' ||\n                e.target.selectionEnd === 0)) {\n            this.focusPrevBox(e.target);\n        }\n        if (e.key === 'Delete' &&\n            (e.target.value === '' ||\n                (e.target.selectionStart !== 0 &&\n                    e.target.selectionEnd === 1))) {\n            this.focusNextBox(e.target);\n        }\n    }\n    onBoxInput(e) {\n        const updatedValue = this.applyRegex(e.target.value);\n        e.target.value = updatedValue;\n        if (e.target.value !== '') {\n            this.focusNextBox(e.target);\n        }\n        this.updateValue();\n    }\n}\nexports.OTPField = OTPField;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./components/field\"), exports);\n__exportStar(require(\"./components/types\"), exports);\n__exportStar(require(\"./utils/regex\"), exports);\n__exportStar(require(\"./utils/types\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOTPRegexForValueType = getOTPRegexForValueType;\nconst types_1 = require(\"./types\");\nfunction getOTPRegexForValueType(valueType) {\n    switch (valueType) {\n        case types_1.OTPValueType.NUMERIC:\n            return /[^0-9]/g;\n        case types_1.OTPValueType.ALPHABETIC:\n            return /[^A-Za-z]/g;\n        case types_1.OTPValueType.ALPHABETIC_LOWER:\n            return /[^a-z]/g;\n        case types_1.OTPValueType.ALPHABETIC_UPPER:\n            return /[^A-Z]/g;\n        case types_1.OTPValueType.ALPHANUMERIC:\n            return /[^A-Za-z0-9]/g;\n        case types_1.OTPValueType.ALPHANUMERIC_LOWER:\n            return /[^a-z0-9]/g;\n        case types_1.OTPValueType.ALPHANUMERIC_UPPER:\n            return /[^A-Za-z0-9]/g;\n        default:\n            throw new Error('Invalid OTP field value type');\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OTPValueType = void 0;\nvar OTPValueType;\n(function (OTPValueType) {\n    OTPValueType[OTPValueType[\"NUMERIC\"] = 0] = \"NUMERIC\";\n    OTPValueType[OTPValueType[\"ALPHABETIC\"] = 1] = \"ALPHABETIC\";\n    OTPValueType[OTPValueType[\"ALPHABETIC_LOWER\"] = 2] = \"ALPHABETIC_LOWER\";\n    OTPValueType[OTPValueType[\"ALPHABETIC_UPPER\"] = 3] = \"ALPHABETIC_UPPER\";\n    OTPValueType[OTPValueType[\"ALPHANUMERIC\"] = 4] = \"ALPHANUMERIC\";\n    OTPValueType[OTPValueType[\"ALPHANUMERIC_LOWER\"] = 5] = \"ALPHANUMERIC_LOWER\";\n    OTPValueType[OTPValueType[\"ALPHANUMERIC_UPPER\"] = 6] = \"ALPHANUMERIC_UPPER\";\n})(OTPValueType || (exports.OTPValueType = OTPValueType = {}));\n"]}